image: docker:19.03.5
services:
  - docker:19.03.5-dind

stages:
  - Build
  - Push

before_script:
  - apk add python3
  - pip3 install awscli==1.18.8
  - docker load --input data/image.tar
  - $(aws ecr get-login --no-include-email --region us-east-1)

Build:
  stage: Build
  before_script: []
  script:
    - echo "=====Criando imagem proxy_lm===="
    - mkdir data/
    - docker build --compress -t proxy_lm .
    - docker save --output data/image.tar proxy_lm
  artifacts:
    name: image
    paths:
      - data/

Push Dev:
  stage: Push
  script:
    - echo "=====Executando push da imagem dev $ECR_REPO:dev===="
    - echo $ECR_REPO:dev
    - docker tag proxy_lm:latest $ECR_REPO:dev
    - docker push $ECR_REPO:dev
  rules:
    - if: "$CI_COMMIT_BRANCH == 'master'"

Push Release:
  stage: Push
  script:
    - echo "=====Executando push da imagem release $CI_COMMIT_TAG===="
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_TAG | sed 's/-release//'
    - export TAGGED_ECR_REPO=$ECR_REPO:$(echo $CI_COMMIT_TAG | sed 's/-release//')
    - echo $TAGGED_ECR_REPO
    - echo "=====Imagem tagueada $TAGGED_ECR_REPO===="
    - docker tag proxy_lm:latest $TAGGED_ECR_REPO
    - docker push $TAGGED_ECR_REPO
    - docker tag $TAGGED_ECR_REPO $ECR_REPO:latest
    - docker push $ECR_REPO:latest
  rules:
    - if: "$CI_COMMIT_TAG =~ /^*-release$/"
